{"version":3,"sources":["views/Book/List/index.js","component/Form/index.js","component/EditDialog/index.js","component/SearchForm/index.js","component/Pagination/index.js","component/BasicTable/style.js","component/BasicTable/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","List","date_fns__WEBPACK_IMPORTED_MODULE_0__","_component_BasicTable__WEBPACK_IMPORTED_MODULE_1__","_gql_book_graphql__WEBPACK_IMPORTED_MODULE_2__","columns","name","formatData","data","format","Date","BasicTable","queryListGql","allBook","deleteGql","deleteOneBook","updateGql","updateBook","dataListName","editType","getFormItem","option","type","editData","setEditData","_option$options","options","setEdit","Object","objectSpread","react_default","a","createElement","Fragment","InputLabel_default","shrink","Select_default","value","onChange","e","defineProperty","target","map","_ref","_ref2","slicedToArray","text","MenuItem_default","key","material_ui_pickers_esm","utils","DateFnsUtils","label","TextField_default","multiline","rows","EditDialog","_ref$typeName","typeName","updateSchema","refetch","showEdit","setShowEdit","_ref$dealEditData","dealEditData","_mutationGraphql","mutationGraphql","_mutationGraphql2","update","loading","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","item","FormControl_default","fullWidth","concat","DialogActions_default","Button_default","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","this","S","FormControl","styled","_templateObject","SearchForm","setFormData","formData","formColumn","_ref$onSubmit","onSubmit","preventDefault","_item","Pagination","pageData","setPageData","count","_ref$refresh","refresh","index_es","component","rowsPerPageOptions","rowsPerPage","page","onChangePage","onChangeRowsPerPage","TableSection","Paper","style_templateObject","Header","_templateObject2","p","_useCustomContext","useCustomContext","con","_queryGraphql","queryGraphql","_queryGraphql2","getData","_queryGraphql2$","_queryGraphql2$$optio","dataList","_queryGraphql2$$total","total","deleteOne","searchFormState","_useState","useState","_useState2","initSearchFormState","pageState","initPageData","_React$useState","React","_React$useState2","sortData","setSortData","getListData","param","arguments","length","undefined","useEffect","editDialogState","_useState3","_useState4","editClick","initState","handleSearch","style_S","Button","variant","SearchForm_SearchForm","assign","Table_default","TableHead_default","TableRow_default","sort","TableCell_default","Tooltip_default","title","active","direction","sortDataTpl","TableBody_default","id","path","_ref2$formatData","get","showConfirm","message","callBack","_callBack","res","abrupt","_x","apply","Pagination_Pagination","EditDialog_EditDialog"],"mappings":"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","file":"static/js/2.dcafd96b.chunk.js","sourcesContent":["import { format } from 'date-fns'\r\nimport { BasicTable } from '@/component/BasicTable'\r\nimport { allBook, updateBook, deleteOneBook } from '@/gql/book.graphql'\r\n\r\nconst editType = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'message'\r\n}]\r\nconst columns = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'id'\r\n}, {\r\n  name: 'message'\r\n}, {\r\n  name: 'createDate',\r\n  formatData: data => format(new Date(data), 'yyyy/MM/dd HH:mm')\r\n}]\r\n\r\nexport const List = BasicTable({\r\n  queryListGql: allBook,\r\n  deleteGql: deleteOneBook,\r\n  updateGql: updateBook,\r\n  dataListName: 'allBook',\r\n  editType,\r\n  columns,\r\n})\r\n\r\nexport default List\r\n","import React from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport { MuiPickersUtilsProvider, DatePicker } from 'material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nexport const getFormItem = (option) => {\r\n  const { name, type, editData, setEditData, options = [] } = option\r\n  const setEdit = (data) => setEditData({ ...editData, ...data })\r\n\r\n  if (type === 'Select') {\r\n    return <>\r\n      <InputLabel shrink={!!editData[name]}>{name}</InputLabel>\r\n      <Select\r\n          value={editData[name] || ''}\r\n          onChange={e => setEdit({\r\n            [name]: e.target.value\r\n          })}\r\n      >\r\n        {\r\n          options.map(([value, text]) => <MenuItem key={value}\r\n                                                   value={value}>{text}</MenuItem>)\r\n        }\r\n      </Select>\r\n    </>\r\n  }\r\n  if (type === 'DatePicker') {\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <DatePicker\r\n          label={name}\r\n          value={editData[name]}\r\n          onChange={e => {\r\n            return setEdit({\r\n              [name]: e\r\n            })\r\n          }}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  }\r\n  return <TextField\r\n      label={name}\r\n      value={editData[name] || ''}\r\n      multiline={option.multiline}\r\n      rows={option.rows}\r\n      onChange={e => setEdit({\r\n        [name]: e.target.value\r\n      })}\r\n  />\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { mutationGraphql } from '@/component/ApolloQuery'\r\nimport { getFormItem } from '@/component/Form'\r\n\r\nexport const initState = () => {\r\n  const [showEdit, setShowEdit] = useState(false)\r\n  const [editData, setEditData] = useState({})\r\n  const editClick = (item) => () => {\r\n    setEditData(item)\r\n    setShowEdit(true)\r\n  }\r\n  return {\r\n    editClick,\r\n    showEdit, setEditData, editData, setShowEdit\r\n  }\r\n}\r\n\r\nexport const EditDialog = (\r\n    {\r\n      typeName = 'data',\r\n      updateSchema,\r\n      editType,\r\n      refetch,\r\n      showEdit, setEditData,\r\n      editData, setShowEdit,\r\n      dealEditData = data => data\r\n    }) => {\r\n  const [update, , loading] = mutationGraphql(updateSchema)\r\n\r\n  return (\r\n      <Dialog open={showEdit}\r\n              onClose={() => setShowEdit(false)}\r\n      >\r\n        <DialogTitle>EDIT</DialogTitle>\r\n        <DialogContent>\r\n          <form>\r\n            {\r\n              editType.map(item => {\r\n                const { name } = item\r\n                return (\r\n                    <FormControl fullWidth\r\n                                 key={`edit${name}`}>\r\n                      {\r\n                        getFormItem({\r\n                          ...item,\r\n                          editData,\r\n                          setEditData,\r\n                        })\r\n                      }\r\n                    </FormControl>\r\n                );\r\n              })\r\n            }\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={async () => {\r\n            await update({\r\n              [typeName]: dealEditData(editData)\r\n            })\r\n            setShowEdit(false)\r\n            refetch()\r\n          }}\r\n          >{loading ? 'loading' : 'save'}</Button>\r\n          <Button onClick={() => setShowEdit(false)}\r\n          >cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { getFormItem } from '@/component/Form'\r\n\r\nconst S = {\r\n  FormControl: styled(FormControl)`\r\n    &&& {\r\n      min-width: 120px;\r\n      margin-left: 20px;\r\n    }\r\n`\r\n}\r\n\r\nexport const initState = () => {\r\n  const [formData, setFormData] = useState({})\r\n  return {\r\n    setFormData, formData,\r\n  }\r\n}\r\n\r\nexport const SearchForm = (\r\n    {\r\n      setFormData,\r\n      formData,\r\n      formColumn,\r\n      onSubmit= () => {},\r\n    }) => {\r\n  return (\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        onSubmit()\r\n      }}>\r\n        {\r\n          formColumn.map(item => {\r\n            const [name, type, options] = item\r\n            return (\r\n                <S.FormControl key={`SearchForm${name}`}>\r\n                  {\r\n                    getFormItem({\r\n                      name,\r\n                      type,\r\n                      options,\r\n                      editData: formData,\r\n                      setEditData: setFormData,\r\n                    })\r\n                  }\r\n                </S.FormControl>\r\n            );\r\n          })\r\n        }\r\n      </form>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { TablePagination } from '@material-ui/core'\r\n\r\nexport const initState = () => {\r\n  const [pageData, setPageData] = useState({\r\n    page: 0,\r\n    rowsPerPage: 10,\r\n  })\r\n  return {\r\n    pageData,\r\n    setPageData: data => setPageData({\r\n      ...pageData,\r\n      ...data\r\n    }),\r\n  }\r\n}\r\n\r\nexport const Pagination = (\r\n    {\r\n      pageData,\r\n      setPageData,\r\n      count,\r\n      refresh = () => {\r\n      },\r\n    }) => {\r\n\r\n  return (\r\n      <TablePagination\r\n          component=\"div\"\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          count={count}\r\n          rowsPerPage={pageData.rowsPerPage || 10}\r\n          page={pageData.page || 0}\r\n          onChangePage={(e, page) => {\r\n            setPageData({\r\n              page,\r\n            })\r\n            refresh({ page })\r\n          }}\r\n          onChangeRowsPerPage={e => {\r\n            setPageData({\r\n              rowsPerPage: e.target.value\r\n            })\r\n            refresh({\r\n              rowsPerPage: e.target.value\r\n            })\r\n          }}\r\n      />\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nexport const S = {}\r\n\r\nS.TableSection = styled(Paper)`\r\n  padding: 10px;\r\n`\r\n\r\nS.Header = styled('header')`\r\n  display: flex;\r\n`\r\n","import React, { useEffect } from 'react'\r\nimport get from 'lodash/get'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { queryGraphql, mutationGraphql } from '@/component/ApolloQuery'\r\nimport Button from \"@material-ui/core/es/Button/Button\"\r\nimport { useCustomContext } from '@/common/context'\r\nimport { EditDialog, initState } from '@/component/EditDialog'\r\nimport { SearchForm, initState as initSearchFormState } from '@/component/SearchForm'\r\nimport { Pagination, initState as initPageData } from '@/component/Pagination'\r\nimport { S } from './style'\r\nimport { TableSortLabel } from \"@material-ui/core\";\r\n\r\nexport const BasicTable = (option) => p => {\r\n  const [con] = useCustomContext()\r\n  const [getData, { [option.dataListName]: dataList = [], total = 0 }] = queryGraphql(option.queryListGql)\r\n  // const [getAllData] = queryGraphql(option.allDataGql)\r\n  const [deleteOne] = mutationGraphql(option.deleteGql)\r\n  const searchFormState = initSearchFormState()\r\n  const pageState = initPageData()\r\n  const [sortData, setSortData] = React.useState({})\r\n  const getListData = (param = {}) => getData({\r\n    data: {\r\n      ...searchFormState.formData,\r\n      sortData,\r\n      ...pageState.pageData,\r\n      ...param,\r\n    },\r\n  })\r\n  useEffect(() => {\r\n    getListData()\r\n  }, [])\r\n  const editDialogState = initState()\r\n  const { editClick } = editDialogState\r\n  const editType = option.editType\r\n  const columns = option.columns\r\n  const handleSearch = param => {\r\n    pageState.setPageData({\r\n      page: 0,\r\n    })\r\n    getListData({\r\n      page: 0,\r\n      ...param,\r\n    })\r\n  }\r\n  return <>\r\n    <S.TableSection>\r\n      <S.Header>\r\n        <Button variant=\"outlined\"\r\n                onClick={editClick({})}\r\n        >add</Button>\r\n        {/*<Button variant=\"outlined\"*/}\r\n        {/*        onClick={() => getAllData()}*/}\r\n        {/*>export</Button>*/}\r\n        {/*<Button variant=\"outlined\"*/}\r\n        {/*        onClick={() => getAllData()}*/}\r\n        {/*>import</Button>*/}\r\n        {\r\n          option.formColumn && <>\r\n            <SearchForm\r\n                formColumn={option.formColumn}\r\n                onSubmit={() => handleSearch()}\r\n                {...searchFormState} />\r\n            <Button onClick={() => handleSearch()}>search</Button>\r\n          </>\r\n        }\r\n      </S.Header>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {\r\n              columns.map(({ name, sort }) => <TableCell\r\n                  key={`tableHead${name}`}\r\n              >\r\n                {!sort ? (name)\r\n                    : (\r\n                        <Tooltip\r\n                            title=\"sort\"\r\n                        >\r\n                          <TableSortLabel\r\n                              active={true}\r\n                              direction={sortData[name] === -1 ? 'desc' : 'asc'}\r\n                              onClick={() => {\r\n                                const sortDataTpl = {\r\n                                  ...sortData,\r\n                                  [name]: -(sortData[name] || 1)\r\n                                }\r\n                                setSortData(sortDataTpl)\r\n                                handleSearch({\r\n                                  sortData: sortDataTpl\r\n                                })\r\n                              }}\r\n                          >\r\n                            {name}\r\n                          </TableSortLabel>\r\n                        </Tooltip>\r\n                    )\r\n                }\r\n              </TableCell>)\r\n            }\r\n            <TableCell>action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            dataList.map((item) => (\r\n                <TableRow key={item.id}>\r\n                  {\r\n                    columns.map(({ name, path, formatData = data => data }) =>\r\n                        <TableCell key={`tableBody${name}`}>{formatData(get(item, (path ? path : name)))}</TableCell>)\r\n                  }\r\n                  <TableCell>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={editClick(item)}\r\n                    >edit</Button>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={() => {\r\n                              con.showConfirm({\r\n                                message: 'Are you sure',\r\n                                callBack: async res => {\r\n                                  if (!res) return\r\n                                  await deleteOne({\r\n                                    id: item.id\r\n                                  })\r\n                                  getListData()\r\n                                }\r\n                              });\r\n                            }}\r\n                    >del</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n            ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n      <Pagination\r\n          {...pageState}\r\n          count={~~total}\r\n          refresh={getListData}\r\n      />\r\n    </S.TableSection>\r\n    <EditDialog refetch={getListData}\r\n                editType={editType}\r\n                updateSchema={option.updateGql}\r\n                dealEditData={option.dealEditData}\r\n                {...editDialogState}\r\n    />\r\n  </>\r\n}\r\n\r\nexport default BasicTable\r\n"],"sourceRoot":""}