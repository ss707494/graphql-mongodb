{"version":3,"sources":["views/Dict/List/style.js","views/Dict/List/index.js","gql/dict.graphql"],"names":["S","TableSection","styled","Paper","_templateObject","useState","React","UserList","p","_useCustomContext","useCustomContext","showMessage","Object","slicedToArray","_useState","_useState2","showEdit","setShowEdit","_useState3","_useState4","editData","setEditData","editClick","item","editType","columns","name","WrapperQuery","allDict","data","refetch","react_default","a","createElement","Fragment","Button","variant","onClick","Table_default","TableHead_default","TableRow_default","map","_ref2","TableCell_default","key","concat","TableBody_default","id","_ref3","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","message","stop","this","Dialog","open","onClose","DialogTitle","DialogContent","TextField","label","fullWidth","value","onChange","e","defineProperty","target","objectSpread","DialogActions","react_apollo_browser_umd","mutation","updateDict","onCompleted","updateUser","_ref4","loading","variables","dict","doc","kind","definitions","typeCondition","directives","selectionSet","selections","arguments","operation","variableDefinitions","variable","type","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","i","length","element","oneQuery","operationName","newDoc","hasOwnProperty","opRefs","Set","allRefs","newRefs","forEach","refName","add","size","prevRefs","has","childRef","op","push","def","refs","collectFragmentReferences","node","selection","module","exports"],"mappings":"idAGO,IAAMA,EAAI,GAEjBA,EAAEC,aAAeC,YAAOC,IAAPD,CAAjBE,gDCaQC,EAAaC,IAAbD,SAEKE,EAAW,SAAAC,GAAK,IAAAC,EACDC,cAAjBC,EADkBC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAClBE,YADkBG,EAEKT,GAAS,GAFdU,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEpBE,EAFoBD,EAAA,GAEVE,EAFUF,EAAA,GAAAG,EAGKb,EAAS,IAHdc,EAAAP,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGpBE,EAHoBD,EAAA,GAGVE,EAHUF,EAAA,GAKrBG,EAAY,SAACC,GAAD,OAAU,WAC1BF,EAAYE,GACZN,GAAY,KAaRO,EAAW,CAAC,OAAQ,OAAQ,OAAQ,WACpCC,EAAU,CAAC,CACfC,KAAM,QACL,CACDA,KAAM,QACL,CACDA,KAAM,QACL,CACDA,KAAM,MACL,CACDA,KAAM,YAER,OAAOC,YAAaC,UAAbD,CAAsB,SAACE,EAAMC,GAAP,OAAmBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAC9CH,EAAAC,EAAAC,cAACjC,EAAEC,aAAH,KACE8B,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAQ,WACRC,QAASf,EAAU,KAD3B,QAIFS,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACED,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KAEIP,EAAQgB,IAAI,SAAAC,GAAA,IAAGhB,EAAHgB,EAAGhB,KAAH,OAAcK,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAWY,IAAG,YAAAC,OAAcnB,IAASA,KAEjEK,EAAAC,EAAAC,cAACU,EAAAX,EAAD,iBAGJD,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KAEIH,EAAKD,QAAQa,IAAI,SAAClB,GAAD,OACbQ,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAUY,IAAKrB,EAAKwB,IAEhBtB,EAAQgB,IAAI,SAAAO,GAAA,IAAGtB,EAAHsB,EAAGtB,KAAH,OAAcK,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAWY,IAAG,YAAAC,OAAcnB,IAASH,EAAKG,MAEtEK,EAAAC,EAAAC,cAACU,EAAAX,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAQ,WACRC,QAASf,EAAUC,IAD3B,QAGAQ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,QAAQ,WACRC,QAnDbzB,OAAAqC,EAAA,GAAAC,EAAAlB,EAAAmB,KAAU,SAAAC,IAAA,OAAAF,EAAAlB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAErB7C,EAAY,CAAE8C,QAAS,mCAFF,wBAAAH,EAAAI,SAAAN,EAAAO,UAkDL,eAUhB5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAQC,KAAM7C,EACN8C,QAAS,kBAAM7C,GAAY,KAEjCc,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,aACAhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KAEIxC,EAASiB,IAAI,SAAAf,GAAI,OACbK,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAWrB,IAAG,OAAAC,OAASnB,GACZwC,MAAOxC,EACPyC,WAAS,EACTC,MAAOhD,EAASM,IAAS,GACzB2C,SAAU,SAAAC,GAAC,OA5EjBzC,EA4E6BjB,OAAA2D,EAAA,EAAA3D,CAAA,GACpBc,EAAO4C,EAAEE,OAAOJ,OA7EhB/C,EAAYT,OAAA6D,EAAA,EAAA7D,CAAA,GAAKQ,EAAaS,IAAxC,IAACA,QAmFbE,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAC0C,EAAA,SAAD,CAAUC,SAAUC,aACVC,YAAa,WACX7D,GAAY,GACZa,MAGT,SAACiD,EAADC,GAAA,IAAeC,EAAfD,EAAeC,QAAf,OACGlD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQE,QAAS,WACf0C,EAAW,CACTG,UAAW,CACTC,KAAM/D,OAIV6D,EAAU,UAAY,UAG9BlD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQE,QAAS,kBAAMpB,GAAY,KAAnC,gBAOOV,+BCnIf,IAAA6E,EAAA,CAAeC,KAAA,WAAAC,YAAA,EAAkCD,KAAA,qBAAA3D,KAAA,CAAoC2D,KAAA,OAAAjB,MAAA,SAA8BmB,cAAA,CAAkBF,KAAA,YAAA3D,KAAA,CAA2B2D,KAAA,OAAAjB,MAAA,SAA8BoB,WAAA,GAAAC,aAAA,CAAiCJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,MAA2BuB,UAAA,GAAAH,WAAA,IAAgC,CAAEH,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,QAA6BuB,UAAA,GAAAH,WAAA,IAAgC,CAAEH,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,QAA6BuB,UAAA,GAAAH,WAAA,IAAgC,CAAEH,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,QAA6BuB,UAAA,GAAAH,WAAA,IAAgC,CAAEH,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,WAAgCuB,UAAA,GAAAH,WAAA,OAAmC,CAAEH,KAAA,sBAAAO,UAAA,WAAAlE,KAAA,CAA4D2D,KAAA,OAAAjB,MAAA,cAAmCyB,oBAAA,EAAyBR,KAAA,qBAAAS,SAAA,CAAwCT,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,SAA8B2B,KAAA,CAASV,KAAA,cAAAU,KAAA,CAA6BV,KAAA,YAAA3D,KAAA,CAA2B2D,KAAA,OAAAjB,MAAA,eAAoCoB,WAAA,KAAiBA,WAAA,GAAAC,aAAA,CAAkCJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,cAAmCuB,UAAA,EAAeN,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,QAA6BA,MAAA,CAAUiB,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,WAA+BoB,WAAA,GAAAC,aAAA,CAAkCJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,iBAAA3D,KAAA,CAAgC2D,KAAA,OAAAjB,MAAA,SAA8BoB,WAAA,UAAuB,CAAEH,KAAA,sBAAAO,UAAA,QAAAlE,KAAA,CAAyD2D,KAAA,OAAAjB,MAAA,WAAgCyB,oBAAA,EAAyBR,KAAA,qBAAAS,SAAA,CAAwCT,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,OAA4B2B,KAAA,CAASV,KAAA,cAAAU,KAAA,CAA6BV,KAAA,YAAA3D,KAAA,CAA2B2D,KAAA,OAAAjB,MAAA,YAAiCoB,WAAA,KAAiBA,WAAA,GAAAC,aAAA,CAAkCJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,WAAgCuB,UAAA,EAAeN,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,MAA2BA,MAAA,CAAUiB,KAAA,WAAA3D,KAAA,CAA0B2D,KAAA,OAAAjB,MAAA,SAA6BoB,WAAA,GAAAC,aAAA,CAAkCJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,iBAAA3D,KAAA,CAAgC2D,KAAA,OAAAjB,MAAA,SAA8BoB,WAAA,UAAuB,CAAEH,KAAA,sBAAAO,UAAA,QAAAlE,KAAA,CAAyD2D,KAAA,OAAAjB,MAAA,WAAgCyB,oBAAA,GAAAL,WAAA,GAAAC,aAAA,CAA0DJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,QAAA3D,KAAA,CAAuB2D,KAAA,OAAAjB,MAAA,WAAgCuB,UAAA,GAAAH,WAAA,GAAAC,aAAA,CAAgDJ,KAAA,eAAAK,WAAA,EAAqCL,KAAA,iBAAA3D,KAAA,CAAgC2D,KAAA,OAAAjB,MAAA,SAA8BoB,WAAA,WAAuBQ,IAAA,CAASC,MAAA,EAAAC,IAAA,MACljFd,EAAAY,IAAAG,OAAA,CAAsBC,KAAA,mYAAgY1E,KAAA,kBAAA2E,eAAA,CAAqDC,KAAA,EAAAC,OAAA,IAkD3c,IAAAC,EAAA,GAWA,SAAAC,EAAArB,EAAA1D,GACA,QAAAgF,EAAA,EAAqBA,EAAAtB,EAAAE,YAAAqB,OAA4BD,IAAA,CACjD,IAAAE,EAAAxB,EAAAE,YAAAoB,GACA,GAAAE,EAAAlF,MAAAkF,EAAAlF,KAAA0C,OAAA1C,EACA,OAAAkF,GAKA,SAAAC,EAAAzB,EAAA0B,GAEA,IAAAC,EAAA,CACA1B,KAAAD,EAAAC,KACAC,YAAA,CAAAmB,EAAArB,EAAA0B,KAEA1B,EAAA4B,eAAA,SACAD,EAAAf,IAAAZ,EAAAY,KAKA,IAAAiB,EAAAT,EAAAM,IAAA,IAAAI,IACAC,EAAA,IAAAD,IACAE,EAAA,IAAAF,IAOA,IAJAD,EAAAI,QAAA,SAAAC,GACAF,EAAAG,IAAAD,KAGAF,EAAAI,KAAA,IACA,IAAAC,EAAAL,EACAA,EAAA,IAAAF,IAEAO,EAAAJ,QAAA,SAAAC,GACAH,EAAAO,IAAAJ,KACAH,EAAAI,IAAAD,IACAd,EAAAc,IAAA,IAAAJ,KACAG,QAAA,SAAAM,GACAP,EAAAG,IAAAI,QAaA,OAPAR,EAAAE,QAAA,SAAAC,GACA,IAAAM,EAAAnB,EAAArB,EAAAkC,GACAM,GACAb,EAAAzB,YAAAuC,KAAAD,KAIAb,EA7DA3B,EAAAE,YAAA+B,QAAA,SAAAS,GACA,GAAAA,EAAApG,KAAA,CACA,IAAAqG,EAAA,IAAAb,KAjCA,SAAAc,EAAAC,EAAAF,GACA,sBAAAE,EAAA5C,KACA0C,EAAAR,IAAAU,EAAAvG,KAAA0C,YACO,0BAAA6D,EAAA5C,KAAA,CACP,IAAAU,EAAAkC,EAAAlC,KACA,cAAAA,EAAAV,MACA0C,EAAAR,IAAAxB,EAAArE,KAAA0C,OAIA6D,EAAAxC,cACAwC,EAAAxC,aAAAC,WAAA2B,QAAA,SAAAa,GACAF,EAAAE,EAAAH,KAIAE,EAAApC,qBACAoC,EAAApC,oBAAAwB,QAAA,SAAAS,GACAE,EAAAF,EAAAC,KAIAE,EAAA3C,aACA2C,EAAA3C,YAAA+B,QAAA,SAAAS,GACAE,EAAAF,EAAAC,KAUAC,CAAAF,EAAAC,GACAvB,EAAAsB,EAAApG,KAAA0C,OAAA2D,KA4DAI,EAAAC,QAAAhD,EAEA+C,EAAAC,QAAA,WAAAvB,EAAAzB,EAAA,cAEA+C,EAAAC,QAAA,QAAAvB,EAAAzB,EAAA,WAEA+C,EAAAC,QAAA,QAAAvB,EAAAzB,EAAA","file":"static/js/2.f2f22610.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nexport const S = {}\r\n\r\nS.TableSection = styled(Paper)`\r\n  padding: 10px;\r\n`\r\n","import React from 'react'\r\nimport { Mutation } from 'react-apollo'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport { WrapperQuery } from '@/component/ApolloQuery'\r\nimport Button from \"@material-ui/core/es/Button/Button\"\r\nimport Dialog from \"@material-ui/core/es/Dialog/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/es/DialogTitle/DialogTitle\"\r\nimport DialogActions from \"@material-ui/core/es/DialogActions/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/es/DialogContent/DialogContent\"\r\nimport TextField from \"@material-ui/core/es/TextField/TextField\"\r\nimport { updateDict, allDict } from '@/gql/dict.graphql'\r\nimport { useCustomContext } from '@/common/context'\r\nimport { S } from './style'\r\n\r\nconst { useState } = React\r\n\r\nexport const UserList = p => {\r\n  const [{ showMessage }] = useCustomContext()\r\n  const [showEdit, setShowEdit] = useState(false)\r\n  const [editData, setEditData] = useState({})\r\n  const setEdit = (data) => setEditData({ ...editData, ...data })\r\n  const editClick = (item) => () => {\r\n    setEditData(item)\r\n    setShowEdit(true)\r\n  }\r\n  const test = (item) => async () => {\r\n    // console.log(item)\r\n    showMessage({ message: '请重新登录' })\r\n    // const res = await client.query({\r\n    //   query: oneUser,\r\n    //   variables: {\r\n    //     id: item.id\r\n    //   }\r\n    // })\r\n    // console.log(res)\r\n  }\r\n  const editType = ['name', 'code', 'type', 'message']\r\n  const columns = [{\r\n    name: 'name'\r\n  }, {\r\n    name: 'code'\r\n  }, {\r\n    name: 'type'\r\n  }, {\r\n    name: 'id'\r\n  }, {\r\n    name: 'message'\r\n  }]\r\n  return WrapperQuery(allDict)((data, refetch) => <>\r\n    <S.TableSection>\r\n      <header>\r\n        <Button variant=\"outlined\"\r\n                onClick={editClick({})}\r\n        >add</Button>\r\n      </header>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {\r\n              columns.map(({ name }) => <TableCell key={`tableHead${name}`}>{name}</TableCell>)\r\n            }\r\n            <TableCell>action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            data.allDict.map((item) => (\r\n                <TableRow key={item.id}>\r\n                  {\r\n                    columns.map(({ name }) => <TableCell key={`tableBody${name}`}>{item[name]}</TableCell>)\r\n                  }\r\n                  <TableCell>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={editClick(item)}\r\n                    >edit</Button>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={test(item)}\r\n                    >test</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n            ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </S.TableSection>\r\n    <Dialog open={showEdit}\r\n            onClose={() => setShowEdit(false)}\r\n    >\r\n      <DialogTitle>EDIT</DialogTitle>\r\n      <DialogContent>\r\n        {\r\n          editType.map(name => (\r\n              <TextField key={`edit${name}`}\r\n                         label={name}\r\n                         fullWidth\r\n                         value={editData[name] || ''}\r\n                         onChange={e => setEdit({\r\n                           [name]: e.target.value\r\n                         })}\r\n              />\r\n          ))\r\n        }\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Mutation mutation={updateDict}\r\n                  onCompleted={() => {\r\n                    setShowEdit(false)\r\n                    refetch()\r\n                  }}\r\n        >\r\n          {(updateUser, { loading }) => (\r\n              <Button onClick={() => {\r\n                updateUser({\r\n                  variables: {\r\n                    dict: editData\r\n                  }\r\n                })\r\n              }}\r\n              >{loading ? 'loading' : 'save'}</Button>\r\n          )}\r\n        </Mutation>\r\n        <Button onClick={() => setShowEdit(false)}\r\n        >cancel</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  </>)\r\n}\r\n\r\nexport default UserList\r\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dict\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dict\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DictInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"dict\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"dict\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"oneDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"oneDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"allDict\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"allDict\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":332}};\n    doc.loc.source = {\"body\":\"fragment dictF on Dict {\\r\\n    id\\r\\n    name\\r\\n    code\\r\\n    type\\r\\n    message\\r\\n}\\r\\n\\r\\nmutation updateDict($dict: DictInput!){\\r\\n    updateDict(dict: $dict) {\\r\\n        ... dictF\\r\\n    }\\r\\n}\\r\\n\\r\\nquery oneDict($id: String!){\\r\\n    oneDict(id: $id) {\\r\\n        ... dictF\\r\\n    }\\r\\n}\\r\\n\\r\\nquery allDict{\\r\\n    allDict {\\r\\n        ... dictF\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateDict\"] = oneQuery(doc, \"updateDict\");\n        \n        module.exports[\"oneDict\"] = oneQuery(doc, \"oneDict\");\n        \n        module.exports[\"allDict\"] = oneQuery(doc, \"allDict\");\n        \r\n"],"sourceRoot":""}