{"version":3,"sources":["views/User/List/index.js","component/EditDialog/index.js","component/SearchForm/index.js","component/BasicTable/style.js","component/BasicTable/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","UserList","_component_BasicTable__WEBPACK_IMPORTED_MODULE_0__","_gql_user_graphql__WEBPACK_IMPORTED_MODULE_1__","BasicTable","queryListGql","allUser","deleteGql","deleteOneUser","updateGql","updateUser","dataListName","editType","name","columns","EditDialog","_ref","_ref$typeName","typeName","updateSchema","refetch","showEdit","setEditData","editData","setShowEdit","_ref$dealEditData","dealEditData","data","setEdit","Object","objectSpread","_mutationGraphql","mutationGraphql","_mutationGraphql2","slicedToArray","update","loading","react_default","a","createElement","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","map","item","FormControl_default","fullWidth","key","concat","getFormItem","DialogActions_default","Button_default","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","defineProperty","stop","this","option","type","_option$options","options","Fragment","InputLabel_default","shrink","Select_default","value","onChange","e","target","_ref3","_ref4","text","MenuItem_default","material_ui_pickers_esm","utils","DateFnsUtils","label","TextField_default","multiline","rows","SearchForm","setFormData","formData","formColumn","_ref2","S","TableSection","styled","Paper","_templateObject","p","_useCustomContext","useCustomContext","con","_queryGraphql","queryGraphql","_queryGraphql2","getData","_queryGraphql2$1$opti","dataList","deleteOne","searchFormState","_useState","useState","_useState2","initSearchFormState","useEffect","editDialogState","_useState3","_useState4","editClick","initState","Button","variant","SearchForm_SearchForm","assign","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","id","path","_ref2$formatData","formatData","get","showConfirm","message","callBack","_callBack","res","abrupt","_x","apply","arguments","EditDialog_EditDialog"],"mappings":"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","file":"static/js/6.7d1ff793.chunk.js","sourcesContent":["import { BasicTable } from '@/component/BasicTable'\r\nimport { updateUser, allUser, deleteOneUser } from '@/gql/user.graphql'\r\n\r\nconst editType = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'auth'\r\n}, {\r\n  name: 'message'\r\n}]\r\nconst columns = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'auth'\r\n}, {\r\n  name: 'id'\r\n}, {\r\n  name: 'message'\r\n}]\r\n\r\nexport const UserList = BasicTable({\r\n  queryListGql: allUser,\r\n  deleteGql: deleteOneUser,\r\n  updateGql: updateUser,\r\n  dataListName: 'allUser',\r\n  editType,\r\n  columns,\r\n})\r\n\r\nexport default UserList\r\n","import React, { useState } from 'react'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport { MuiPickersUtilsProvider, DatePicker } from 'material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { mutationGraphql } from '@/component/ApolloQuery'\r\n\r\nexport const initState = () => {\r\n  const [showEdit, setShowEdit] = useState(false)\r\n  const [editData, setEditData] = useState({})\r\n  const editClick = (item) => () => {\r\n    setEditData(item)\r\n    setShowEdit(true)\r\n  }\r\n  return {\r\n    editClick,\r\n    showEdit, setEditData, editData, setShowEdit\r\n  }\r\n}\r\n\r\nexport const EditDialog = (\r\n    {\r\n      typeName = 'data',\r\n      updateSchema,\r\n      editType,\r\n      refetch,\r\n      showEdit, setEditData,\r\n      editData, setShowEdit,\r\n      dealEditData = data => data\r\n    }) => {\r\n  const setEdit = (data) => setEditData({ ...editData, ...data })\r\n  const [update, , loading] = mutationGraphql(updateSchema)\r\n\r\n  return (\r\n      <Dialog open={showEdit}\r\n              onClose={() => setShowEdit(false)}\r\n      >\r\n        <DialogTitle>EDIT</DialogTitle>\r\n        <DialogContent>\r\n          <form>\r\n            {\r\n              editType.map(item => {\r\n                const { name } = item\r\n                return (\r\n                    <FormControl fullWidth\r\n                                 key={`edit${name}`}>\r\n                      {\r\n                        getFormItem({\r\n                          ...item,\r\n                          editData,\r\n                          setEdit,\r\n                          setEditData,\r\n                        })\r\n                      }\r\n                    </FormControl>\r\n                );\r\n              })\r\n            }\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={async () => {\r\n            await update({\r\n              [typeName]: dealEditData(editData)\r\n            })\r\n            setShowEdit(false)\r\n            refetch()\r\n          }}\r\n          >{loading ? 'loading' : 'save'}</Button>\r\n          <Button onClick={() => setShowEdit(false)}\r\n          >cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  )\r\n}\r\n\r\nconst getFormItem = (option) => {\r\n  const { name, type, editData, setEdit, options = [] } = option\r\n\r\n  if (type === 'Select') {\r\n    return <>\r\n      <InputLabel shrink={editData[name]}>{name}</InputLabel>\r\n      <Select\r\n          value={editData[name]}\r\n          onChange={e => setEdit({\r\n            [name]: e.target.value\r\n          })}\r\n      >\r\n        {\r\n          options.map(([value, text]) => <MenuItem key={value}\r\n                                                   value={value}>{text}</MenuItem>)\r\n        }\r\n      </Select>\r\n    </>\r\n  }\r\n  if (type === 'DatePicker') {\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <DatePicker\r\n          label={name}\r\n          value={editData[name]}\r\n          onChange={e => {\r\n            return setEdit({\r\n              [name]: e\r\n            })\r\n          }}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  }\r\n  return <TextField\r\n      label={name}\r\n      value={editData[name] || ''}\r\n      multiline={option.multiline}\r\n      rows={option.rows}\r\n      onChange={e => setEdit({\r\n        [name]: e.target.value\r\n      })}\r\n  />\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport { MuiPickersUtilsProvider, DatePicker } from 'material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport { mutationGraphql } from '@/component/ApolloQuery'\r\n\r\nexport const initState = () => {\r\n  const [formData, setFormData] = useState({})\r\n  return {\r\n    setFormData, formData,\r\n  }\r\n}\r\n\r\nexport const SearchForm = (\r\n    {\r\n      setFormData,\r\n      formData,\r\n      formColumn,\r\n    }) => {\r\n  return (\r\n      <form>\r\n        {\r\n          formColumn.map(item => {\r\n            const [name] = item\r\n            return (\r\n                <FormControl key={`SearchForm${name}`}>\r\n                  {\r\n                    getFormItem({\r\n                      ...item,\r\n                      formData,\r\n                      setFormData,\r\n                    })\r\n                  }\r\n                </FormControl>\r\n            );\r\n          })\r\n        }\r\n      </form>\r\n  )\r\n}\r\n\r\nconst getFormItem = (option) => {\r\n  const { name, type, formData, setEdit, options = [] } = option\r\n\r\n  if (type === 'Select') {\r\n    return <>\r\n      <InputLabel shrink={formData[name]}>{name}</InputLabel>\r\n      <Select\r\n          value={formData[name]}\r\n          onChange={e => setEdit({\r\n            [name]: e.target.value\r\n          })}\r\n      >\r\n        {\r\n          options.map(([value, text]) => <MenuItem key={value}\r\n                                                   value={value}>{text}</MenuItem>)\r\n        }\r\n      </Select>\r\n    </>\r\n  }\r\n  if (type === 'DatePicker') {\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <DatePicker\r\n          label={name}\r\n          value={formData[name]}\r\n          onChange={e => {\r\n            return setEdit({\r\n              [name]: e\r\n            })\r\n          }}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  }\r\n  return <TextField\r\n      label={name}\r\n      value={formData[name] || ''}\r\n      multiline={option.multiline}\r\n      rows={option.rows}\r\n      onChange={e => setEdit({\r\n        [name]: e.target.value\r\n      })}\r\n  />\r\n\r\n}\r\n","import styled from 'styled-components'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nexport const S = {}\r\n\r\nS.TableSection = styled(Paper)`\r\n  padding: 10px;\r\n`\r\n","import React, { useEffect } from 'react'\r\nimport get from 'lodash/get'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport { queryGraphql, mutationGraphql } from '@/component/ApolloQuery'\r\nimport Button from \"@material-ui/core/es/Button/Button\"\r\nimport { useCustomContext } from '@/common/context'\r\nimport { EditDialog, initState } from '@/component/EditDialog'\r\nimport { SearchForm, initState as initSearchFormState } from '@/component/SearchForm'\r\nimport { S } from './style'\r\n\r\nexport const BasicTable = (option) => p => {\r\n  const [con] = useCustomContext()\r\n  const [getData, { [option.dataListName]: dataList = [] }] = queryGraphql(option.queryListGql)\r\n  const [deleteOne] = mutationGraphql(option.deleteGql)\r\n  const searchFormState = initSearchFormState()\r\n  useEffect(() => {\r\n    getData(searchFormState.formData)\r\n  }, [])\r\n  const editDialogState = initState()\r\n  const { editClick } = editDialogState\r\n  const editType = option.editType\r\n  const columns = option.columns\r\n  return <>\r\n    <S.TableSection>\r\n      <header>\r\n        <Button variant=\"outlined\"\r\n                onClick={editClick({})}\r\n        >add</Button>\r\n        {\r\n          option.formColumn && <SearchForm\r\n              formColumn={option.formColumn}\r\n              {...searchFormState} />\r\n        }\r\n      </header>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {\r\n              columns.map(({ name }) => <TableCell key={`tableHead${name}`}>{name}</TableCell>)\r\n            }\r\n            <TableCell>action</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {\r\n            dataList.map((item) => (\r\n                <TableRow key={item.id}>\r\n                  {\r\n                    columns.map(({ name, path, formatData = data => data }) =>\r\n                        <TableCell key={`tableBody${name}`}>{formatData(get(item, (path ? path : name)))}</TableCell>)\r\n                  }\r\n                  <TableCell>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={editClick(item)}\r\n                    >edit</Button>\r\n                    <Button variant=\"outlined\"\r\n                            onClick={() => {\r\n                              con.showConfirm({\r\n                                message: 'Are you sure',\r\n                                callBack: async res => {\r\n                                  if (!res) return\r\n                                  await deleteOne({\r\n                                    id: item.id\r\n                                  })\r\n                                  getData()\r\n                                }\r\n                              });\r\n                            }}\r\n                    >del</Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n            ))\r\n          }\r\n        </TableBody>\r\n      </Table>\r\n    </S.TableSection>\r\n    <EditDialog refetch={getData}\r\n                editType={editType}\r\n                updateSchema={option.updateGql}\r\n                dealEditData={option.dealEditData}\r\n                {...editDialogState}\r\n    />\r\n  </>\r\n}\r\n\r\nexport default BasicTable\r\n"],"sourceRoot":""}