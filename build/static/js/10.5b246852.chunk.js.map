{"version":3,"sources":["views/User/ChangePassword/index.js","../node_modules/apollo-boost/lib/index.js"],"names":["S","ChangePassword","styled","_templateObject","Submit","Button","_templateObject2","props","id","match","params","_useState","useState","_useState2","Object","E_ss_code_react_hooks_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","user","setUser","useEffect","E_ss_code_react_hooks_demo_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","E_ss_code_react_hooks_demo_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default","a","mark","_callee","res","wrap","_context","prev","next","client","query","gql","_templateObject3","variables","sent","data","oneUser","stop","this","_useState3","_useState4","formData","setFormData","changePass","_ref2","_callee2","_context2","newPass","showMessage","message","abrupt","mutate","mutation","_templateObject4","E_ss_code_react_hooks_demo_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","changePassword","apply","arguments","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","name","auth","_material_ui_core__WEBPACK_IMPORTED_MODULE_8__","label","value","verification","onChange","e","target","onClick","tslib__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","apollo_link__WEBPACK_IMPORTED_MODULE_1__","apollo_link_http__WEBPACK_IMPORTED_MODULE_2__","apollo_link_state__WEBPACK_IMPORTED_MODULE_3__","apollo_link_error__WEBPACK_IMPORTED_MODULE_4__","apollo_cache_inmemory__WEBPACK_IMPORTED_MODULE_5__","graphql_tag__WEBPACK_IMPORTED_MODULE_6__","graphql_tag__WEBPACK_IMPORTED_MODULE_6___default","n","d","__webpack_exports__","apollo_client__WEBPACK_IMPORTED_MODULE_7__","PRESET_CONFIG_KEYS","_super","DefaultClient","config","diff","keys","filter","key","indexOf","length","console","warn","join","request","uri","credentials","headers","fetch","fetchOptions","clientState","cacheRedirects","errorCallback","onError","version","cache","Error","stateLink","errorLink","_a","graphQLErrors","networkError","map","locations","path","log","requestHandler","operation","forward","observer","handle","Promise","resolve","then","oper","subscribe","bind","error","complete","catch","unsubscribe","httpLink","link","from","x","call"],"mappings":"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","file":"static/js/10.5b246852.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { gql } from 'apollo-boost'\r\nimport { FormControl, TextField, Button } from '@material-ui/core'\r\nimport { showMessage } from '@/component/Message'\r\nimport { client } from '@/common/apolloCLient'\r\n\r\nconst S = {\r\n  ChangePassword: styled('div')`\r\n    > header {\r\n      > section {\r\n        display: flex;\r\n        > aside {\r\n          width: 80px;\r\n        }\r\n      }\r\n    }\r\n  `,\r\n  Submit: styled(Button)`\r\n    &&& {\r\n      display: block;\r\n    }\r\n  `\r\n}\r\n\r\nexport const ChangePassword = props => {\r\n  const { match: { params: { id } } } = props\r\n\r\n  const [user, setUser] = useState({})\r\n  useEffect(() => {\r\n    (async () => {\r\n      const res = await client.query({\r\n        query: gql`\r\n            query ($id: String!) {\r\n                oneUser(id: $id) {\r\n                    name\r\n                    id\r\n                    auth\r\n                    message\r\n                }\r\n            }\r\n        `,\r\n        variables: { id },\r\n      })\r\n      setUser(res.data.oneUser)\r\n    })()\r\n  }, [])\r\n\r\n  const [formData, setFormData] = useState({})\r\n  const changePass = async () => {\r\n    if (!formData.newPass) {\r\n      showMessage({ message: '请输入password' })\r\n      return\r\n    }\r\n    const res = await client.mutate({\r\n      mutation: gql`\r\n        mutation ($data: ChangePassword!) {\r\n          changePassword(data: $data)\r\n        }\r\n      `,\r\n      variables: {\r\n        data: {\r\n          id: user.id,\r\n          ...formData,\r\n        },\r\n      },\r\n    })\r\n    showMessage({ message: res.data.changePassword })\r\n  }\r\n\r\n  return (\r\n      <S.ChangePassword>\r\n        <header>\r\n          <section>\r\n            <aside>name:</aside>\r\n            <main>{user.name}</main>\r\n          </section>\r\n          <section>\r\n            <aside>auth:</aside>\r\n            <main>{user.auth}</main>\r\n          </section>\r\n        </header>\r\n        <form>\r\n          <FormControl\r\n          >\r\n            <TextField\r\n                label={'verification'}\r\n                value={formData.verification || ''}\r\n                onChange={e => setFormData({\r\n                  ...formData,\r\n                  verification: e.target.value\r\n                })}\r\n            />\r\n            <TextField\r\n                label={'newPass'}\r\n                value={formData.newPass || ''}\r\n                onChange={e => setFormData({\r\n                  ...formData,\r\n                  newPass: e.target.value\r\n                })}\r\n            />\r\n          </FormControl>\r\n          <S.Submit onClick={changePass}>submit</S.Submit>\r\n        </form>\r\n      </S.ChangePassword>\r\n  )\r\n}\r\n\r\nexport default ChangePassword\r\n","import * as tslib_1 from \"tslib\";\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nexport { gql, HttpLink };\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version'];\n\nvar DefaultClient = function (_super) {\n  tslib_1.__extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n\n      if (diff.length > 0) {\n        console.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n\n    var request = config.request,\n        uri = config.uri,\n        credentials = config.credentials,\n        headers = config.headers,\n        fetch = config.fetch,\n        fetchOptions = config.fetchOptions,\n        clientState = config.clientState,\n        cacheRedirects = config.cacheRedirects,\n        errorCallback = config.onError,\n        name = config.name,\n        version = config.version;\n    var cache = config.cache;\n\n    if (cache && cacheRedirects) {\n      throw new Error('Incompatible cache configuration. If providing `cache` then ' + 'configure the provided instance with `cacheRedirects` instead.');\n    }\n\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n\n    var stateLink = clientState ? withClientState(tslib_1.__assign({}, clientState, {\n      cache: cache\n    })) : false;\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError;\n\n      if (graphQLErrors) {\n        graphQLErrors.map(function (_a) {\n          var message = _a.message,\n              locations = _a.locations,\n              path = _a.path;\n          return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n\n      if (networkError) {\n        console.log(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, stateLink, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version\n    }) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(ApolloClient);\n\nexport default DefaultClient;"],"sourceRoot":""}