{"version":3,"sources":["views/Util/Tool/index.js","../node_modules/apollo-boost/lib/index.js"],"names":["S","Tool","styled","Paper","_templateObject","props","_React$useState","React","useState","_React$useState2","Object","E_ss_code_react_hooks_demo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","pass","setPass","_queryGraphql","queryGraphql","gql","_templateObject2","_queryGraphql2","getData","data","useEffect","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_material_ui_core__WEBPACK_IMPORTED_MODULE_7__","label","value","onChange","e","target","getPassCode","onClick","tslib__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","apollo_link__WEBPACK_IMPORTED_MODULE_1__","apollo_link_http__WEBPACK_IMPORTED_MODULE_2__","apollo_link_state__WEBPACK_IMPORTED_MODULE_3__","apollo_link_error__WEBPACK_IMPORTED_MODULE_4__","apollo_cache_inmemory__WEBPACK_IMPORTED_MODULE_5__","graphql_tag__WEBPACK_IMPORTED_MODULE_6__","graphql_tag__WEBPACK_IMPORTED_MODULE_6___default","n","d","__webpack_exports__","apollo_client__WEBPACK_IMPORTED_MODULE_7__","PRESET_CONFIG_KEYS","_super","DefaultClient","config","diff","keys","filter","key","indexOf","length","console","warn","join","request","uri","credentials","headers","fetch","fetchOptions","clientState","cacheRedirects","errorCallback","onError","name","version","cache","Error","stateLink","errorLink","_a","graphQLErrors","networkError","map","message","locations","path","log","requestHandler","operation","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","httpLink","link","from","x","call","this"],"mappings":"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","file":"static/js/11.06d1f397.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport { gql } from 'apollo-boost'\r\n\r\nimport { queryGraphql } from '@/component/ApolloQuery'\r\n\r\nimport { allBook, updateBook, deleteOneBook } from '@/gql/book.graphql'\r\nimport { TextField, Button, Paper } from \"@material-ui/core\";\r\n\r\nconst S = {}\r\nS.Tool = styled(Paper)`\r\n  padding: 20px;\r\n`\r\n\r\nexport const Tool = props => {\r\n  const [pass, setPass] = React.useState('')\r\n  const [\r\n    getData, data,\r\n  ] = queryGraphql(gql`\r\n    query ($pass: String!) {\r\n      getPassCode(pass: $pass)\r\n    }\r\n  `)\r\n  React.useEffect(() => {\r\n  }, [])\r\n\r\n  return (\r\n      <S.Tool>\r\n        <section>\r\n          <TextField\r\n              label=\"password\"\r\n              value={pass}\r\n              onChange={e => setPass(e.target.value)}\r\n          >\r\n          </TextField>\r\n          <span>{data.getPassCode}</span>\r\n          <Button onClick={() => getData({ pass })}\r\n          >GET</Button>\r\n        </section>\r\n      </S.Tool>\r\n  )\r\n}\r\n\r\nexport default Tool\r\n","import * as tslib_1 from \"tslib\";\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { withClientState } from 'apollo-link-state';\nimport { onError } from 'apollo-link-error';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nexport { gql, HttpLink };\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version'];\n\nvar DefaultClient = function (_super) {\n  tslib_1.__extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n\n      if (diff.length > 0) {\n        console.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n\n    var request = config.request,\n        uri = config.uri,\n        credentials = config.credentials,\n        headers = config.headers,\n        fetch = config.fetch,\n        fetchOptions = config.fetchOptions,\n        clientState = config.clientState,\n        cacheRedirects = config.cacheRedirects,\n        errorCallback = config.onError,\n        name = config.name,\n        version = config.version;\n    var cache = config.cache;\n\n    if (cache && cacheRedirects) {\n      throw new Error('Incompatible cache configuration. If providing `cache` then ' + 'configure the provided instance with `cacheRedirects` instead.');\n    }\n\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n\n    var stateLink = clientState ? withClientState(tslib_1.__assign({}, clientState, {\n      cache: cache\n    })) : false;\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError;\n\n      if (graphQLErrors) {\n        graphQLErrors.map(function (_a) {\n          var message = _a.message,\n              locations = _a.locations,\n              path = _a.path;\n          return console.log(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n\n      if (networkError) {\n        console.log(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, stateLink, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version\n    }) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(ApolloClient);\n\nexport default DefaultClient;"],"sourceRoot":""}