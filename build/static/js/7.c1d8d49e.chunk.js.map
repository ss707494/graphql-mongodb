{"version":3,"sources":["views/Dict/List/index.js","component/Form/index.js","component/EditDialog/index.js","component/SearchForm/index.js","component/Pagination/index.js","component/BasicTable/style.js","component/BasicTable/index.js","gql/dict.graphql"],"names":["__webpack_require__","r","__webpack_exports__","d","DictList","_component_BasicTable__WEBPACK_IMPORTED_MODULE_0__","date_fns__WEBPACK_IMPORTED_MODULE_1__","_gql_dict_graphql__WEBPACK_IMPORTED_MODULE_2__","columns","name","sort","formatData","data","format","Date","BasicTable","allDataGql","allDataDict","queryListGql","allDict","deleteGql","deleteOneDict","updateGql","updateDict","dataListName","editType","type","getFormItem","option","editData","setEditData","_option$options","options","setEdit","Object","objectSpread","react_default","a","createElement","Fragment","InputLabel_default","shrink","Select_default","value","onChange","e","defineProperty","target","map","_ref","_ref2","slicedToArray","text","MenuItem_default","key","material_ui_pickers_esm","utils","DateFnsUtils","label","TextField_default","multiline","rows","EditDialog","_ref$typeName","typeName","updateSchema","refetch","showEdit","setShowEdit","_ref$dealEditData","dealEditData","_mutationGraphql","mutationGraphql","_mutationGraphql2","update","loading","Dialog_default","open","onClose","DialogTitle_default","DialogContent_default","item","FormControl_default","fullWidth","concat","DialogActions_default","Button_default","onClick","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","stop","this","S","FormControl","styled","_templateObject","SearchForm","setFormData","formData","formColumn","_ref$onSubmit","onSubmit","preventDefault","_item","Pagination","pageData","setPageData","count","_ref$refresh","refresh","index_es","component","rowsPerPageOptions","rowsPerPage","page","onChangePage","onChangeRowsPerPage","TableSection","Paper","style_templateObject","Header","_templateObject2","Loading","_templateObject3","p","_useCustomContext","useCustomContext","con","_queryGraphql","queryGraphql","_queryGraphql2","getData","_queryGraphql2$","_queryGraphql2$$optio","dataList","_queryGraphql2$$total","total","listDataLoading","deleteOne","searchFormState","_useState","useState","_useState2","initSearchFormState","pageState","initPageData","_React$useState","React","_React$useState2","sortData","setSortData","getListData","param","arguments","length","undefined","useEffect","editDialogState","_useState3","_useState4","editClick","initState","handleSearch","style_S","Button","variant","SearchForm_SearchForm","assign","Table_default","TableHead_default","TableRow_default","TableCell_default","Tooltip_default","title","active","direction","sortDataTpl","TableBody_default","id","path","_ref2$formatData","get","showConfirm","message","callBack","_callBack","res","abrupt","_x","apply","Pagination_Pagination","EditDialog_EditDialog","doc","kind","definitions","typeCondition","directives","selectionSet","selections","operation","variableDefinitions","variable","alias","loc","start","end","source","body","locationOffset","line","column","definitionRefs","findOperation","i","element","oneQuery","operationName","newDoc","hasOwnProperty","opRefs","Set","allRefs","newRefs","forEach","refName","add","size","prevRefs","has","childRef","op","push","def","refs","collectFragmentReferences","node","selection","module","exports"],"mappings":"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","file":"static/js/7.c1d8d49e.chunk.js","sourcesContent":["import { BasicTable } from '@/component/BasicTable'\r\nimport { format } from 'date-fns'\r\nimport { allDict, updateDict, deleteOneDict, allDataDict } from '@/gql/dict.graphql'\r\n\r\nconst editType = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'code'\r\n}, {\r\n  name: 'type'\r\n}, {\r\n  name: 'message'\r\n}, {\r\n  name: 'date',\r\n  type: 'DatePicker'\r\n}]\r\nconst columns = [{\r\n  name: 'name'\r\n}, {\r\n  name: 'code',\r\n  sort: true,\r\n}, {\r\n  name: 'type'\r\n}, {\r\n  name: 'id'\r\n}, {\r\n  name: 'date',\r\n  formatData: data => format(new Date(data), 'yyyy/MM/dd HH:mm')\r\n}, {\r\n  name: 'message'\r\n}]\r\n\r\nexport const DictList = BasicTable({\r\n  allDataGql: allDataDict,\r\n  queryListGql: allDict,\r\n  deleteGql: deleteOneDict,\r\n  updateGql: updateDict,\r\n  dataListName: 'allDict',\r\n  editType,\r\n  columns,\r\n})\r\n\r\nexport default DictList\r\n","import React from 'react'\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport { MuiPickersUtilsProvider, DatePicker } from 'material-ui-pickers'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nexport const getFormItem = (option) => {\r\n  const { name, type, editData, setEditData, options = [] } = option\r\n  const setEdit = (data) => setEditData({ ...editData, ...data })\r\n\r\n  if (type === 'Select') {\r\n    return <>\r\n      <InputLabel shrink={!!editData[name]}>{name}</InputLabel>\r\n      <Select\r\n          value={editData[name] || ''}\r\n          onChange={e => setEdit({\r\n            [name]: e.target.value\r\n          })}\r\n      >\r\n        {\r\n          options.map(([value, text]) => <MenuItem key={value}\r\n                                                   value={value}>{text}</MenuItem>)\r\n        }\r\n      </Select>\r\n    </>\r\n  }\r\n  if (type === 'DatePicker') {\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <DatePicker\r\n          label={name}\r\n          value={editData[name]}\r\n          onChange={e => {\r\n            return setEdit({\r\n              [name]: e\r\n            })\r\n          }}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  }\r\n  return <TextField\r\n      label={name}\r\n      value={editData[name] || ''}\r\n      multiline={option.multiline}\r\n      rows={option.rows}\r\n      onChange={e => setEdit({\r\n        [name]: e.target.value\r\n      })}\r\n  />\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\"\r\nimport DialogActions from \"@material-ui/core/DialogActions\"\r\nimport DialogContent from \"@material-ui/core/DialogContent\"\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { mutationGraphql } from '@/component/ApolloQuery'\r\nimport { getFormItem } from '@/component/Form'\r\n\r\nexport const initState = () => {\r\n  const [showEdit, setShowEdit] = useState(false)\r\n  const [editData, setEditData] = useState({})\r\n  const editClick = (item) => () => {\r\n    setEditData(item)\r\n    setShowEdit(true)\r\n  }\r\n  return {\r\n    editClick,\r\n    showEdit, setEditData, editData, setShowEdit\r\n  }\r\n}\r\n\r\nexport const EditDialog = (\r\n    {\r\n      typeName = 'data',\r\n      updateSchema,\r\n      editType,\r\n      refetch,\r\n      showEdit, setEditData,\r\n      editData, setShowEdit,\r\n      dealEditData = data => data\r\n    }) => {\r\n  const [update, , loading] = mutationGraphql(updateSchema)\r\n\r\n  return (\r\n      <Dialog open={showEdit}\r\n              onClose={() => setShowEdit(false)}\r\n      >\r\n        <DialogTitle>EDIT</DialogTitle>\r\n        <DialogContent>\r\n          <form>\r\n            {\r\n              editType.map(item => {\r\n                const { name } = item\r\n                return (\r\n                    <FormControl fullWidth\r\n                                 key={`edit${name}`}>\r\n                      {\r\n                        getFormItem({\r\n                          ...item,\r\n                          editData,\r\n                          setEditData,\r\n                        })\r\n                      }\r\n                    </FormControl>\r\n                );\r\n              })\r\n            }\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={async () => {\r\n            await update({\r\n              [typeName]: dealEditData(editData)\r\n            })\r\n            setShowEdit(false)\r\n            refetch()\r\n          }}\r\n          >{loading ? 'loading' : 'save'}</Button>\r\n          <Button onClick={() => setShowEdit(false)}\r\n          >cancel</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  )\r\n}\r\n\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { getFormItem } from '@/component/Form'\r\n\r\nconst S = {\r\n  FormControl: styled(FormControl)`\r\n    &&& {\r\n      min-width: 120px;\r\n      margin-left: 20px;\r\n    }\r\n`\r\n}\r\n\r\nexport const initState = () => {\r\n  const [formData, setFormData] = useState({})\r\n  return {\r\n    setFormData, formData,\r\n  }\r\n}\r\n\r\nexport const SearchForm = (\r\n    {\r\n      setFormData,\r\n      formData,\r\n      formColumn,\r\n      onSubmit= () => {},\r\n    }) => {\r\n  return (\r\n      <form onSubmit={e => {\r\n        e.preventDefault()\r\n        onSubmit()\r\n      }}>\r\n        {\r\n          formColumn.map(item => {\r\n            const [name, type, options] = item\r\n            return (\r\n                <S.FormControl key={`SearchForm${name}`}>\r\n                  {\r\n                    getFormItem({\r\n                      name,\r\n                      type,\r\n                      options,\r\n                      editData: formData,\r\n                      setEditData: setFormData,\r\n                    })\r\n                  }\r\n                </S.FormControl>\r\n            );\r\n          })\r\n        }\r\n      </form>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { TablePagination } from '@material-ui/core'\r\n\r\nexport const initState = () => {\r\n  const [pageData, setPageData] = useState({\r\n    page: 0,\r\n    rowsPerPage: 10,\r\n  })\r\n  return {\r\n    pageData,\r\n    setPageData: data => setPageData({\r\n      ...pageData,\r\n      ...data\r\n    }),\r\n  }\r\n}\r\n\r\nexport const Pagination = (\r\n    {\r\n      pageData,\r\n      setPageData,\r\n      count,\r\n      refresh = () => {\r\n      },\r\n    }) => {\r\n\r\n  return (\r\n      <TablePagination\r\n          component=\"div\"\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          count={count}\r\n          rowsPerPage={pageData.rowsPerPage || 10}\r\n          page={pageData.page || 0}\r\n          onChangePage={(e, page) => {\r\n            setPageData({\r\n              page,\r\n            })\r\n            refresh({ page })\r\n          }}\r\n          onChangeRowsPerPage={e => {\r\n            setPageData({\r\n              rowsPerPage: e.target.value\r\n            })\r\n            refresh({\r\n              rowsPerPage: e.target.value\r\n            })\r\n          }}\r\n      />\r\n  )\r\n}\r\n","import styled from 'styled-components'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nexport const S = {}\r\n\r\nS.TableSection = styled(Paper)`\r\n  padding: 10px;\r\n`\r\n\r\nS.Header = styled('header')`\r\n  display: flex;\r\n`\r\n\r\nS.Loading = styled('section')`\r\n  text-align: center;\r\n`\r\n","import React, { useEffect } from 'react'\r\nimport get from 'lodash/get'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport { queryGraphql, mutationGraphql } from '@/component/ApolloQuery'\r\nimport Button from \"@material-ui/core/es/Button/Button\"\r\nimport { useCustomContext } from '@/common/context'\r\nimport { EditDialog, initState } from '@/component/EditDialog'\r\nimport { SearchForm, initState as initSearchFormState } from '@/component/SearchForm'\r\nimport { Pagination, initState as initPageData } from '@/component/Pagination'\r\nimport { S } from './style'\r\nimport { CircularProgress, TableSortLabel } from \"@material-ui/core\";\r\n\r\nexport const BasicTable = (option) => p => {\r\n  const [con] = useCustomContext()\r\n  const [getData, { [option.dataListName]: dataList = [], total = 0 }, listDataLoading] = queryGraphql(option.queryListGql)\r\n  // const [getAllData] = queryGraphql(option.allDataGql)\r\n  const [deleteOne] = mutationGraphql(option.deleteGql)\r\n  const searchFormState = initSearchFormState()\r\n  const pageState = initPageData()\r\n  const [sortData, setSortData] = React.useState({})\r\n  const getListData = (param = {}) => getData({\r\n    data: {\r\n      ...searchFormState.formData,\r\n      sortData,\r\n      ...pageState.pageData,\r\n      ...param,\r\n    },\r\n  })\r\n  useEffect(() => {\r\n    getListData()\r\n  }, [])\r\n  const editDialogState = initState()\r\n  const { editClick } = editDialogState\r\n  const editType = option.editType\r\n  const columns = option.columns\r\n  const handleSearch = param => {\r\n    pageState.setPageData({\r\n      page: 0,\r\n    })\r\n    getListData({\r\n      page: 0,\r\n      ...param,\r\n    })\r\n  }\r\n  return <>\r\n    <S.TableSection>\r\n      <S.Header>\r\n        <Button variant=\"outlined\"\r\n                onClick={editClick({})}\r\n        >add</Button>\r\n        {/*<Button variant=\"outlined\"*/}\r\n        {/*        onClick={() => getAllData()}*/}\r\n        {/*>export</Button>*/}\r\n        {/*<Button variant=\"outlined\"*/}\r\n        {/*        onClick={() => getAllData()}*/}\r\n        {/*>import</Button>*/}\r\n        {\r\n          option.formColumn && <>\r\n            <SearchForm\r\n                formColumn={option.formColumn}\r\n                onSubmit={() => handleSearch()}\r\n                {...searchFormState} />\r\n            <Button onClick={() => handleSearch()}>search</Button>\r\n          </>\r\n        }\r\n      </S.Header>\r\n      {(listDataLoading) ? <S.Loading><CircularProgress/></S.Loading>\r\n          : <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                {\r\n                  columns.map(({ name, sort }) => <TableCell\r\n                      key={`tableHead${name}`}\r\n                  >\r\n                    {!sort ? (name)\r\n                        : (\r\n                            <Tooltip\r\n                                title=\"sort\"\r\n                            >\r\n                              <TableSortLabel\r\n                                  active={true}\r\n                                  direction={sortData[name] === -1 ? 'desc' : 'asc'}\r\n                                  onClick={() => {\r\n                                    const sortDataTpl = {\r\n                                      ...sortData,\r\n                                      [name]: -(sortData[name] || 1)\r\n                                    }\r\n                                    setSortData(sortDataTpl)\r\n                                    handleSearch({\r\n                                      sortData: sortDataTpl\r\n                                    })\r\n                                  }}\r\n                              >\r\n                                {name}\r\n                              </TableSortLabel>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                  </TableCell>)\r\n                }\r\n                <TableCell>action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {\r\n                dataList.map((item) => (\r\n                    <TableRow key={item.id}>\r\n                      {\r\n                        columns.map(({ name, path, formatData = data => data }) =>\r\n                            <TableCell key={`tableBody${name}`}>{formatData(get(item, (path ? path : name)))}</TableCell>)\r\n                      }\r\n                      <TableCell>\r\n                        <Button variant=\"outlined\"\r\n                                onClick={editClick(item)}\r\n                        >edit</Button>\r\n                        <Button variant=\"outlined\"\r\n                                onClick={() => {\r\n                                  con.showConfirm({\r\n                                    message: 'Are you sure',\r\n                                    callBack: async res => {\r\n                                      if (!res) return\r\n                                      await deleteOne({\r\n                                        id: item.id\r\n                                      })\r\n                                      getListData()\r\n                                    }\r\n                                  });\r\n                                }}\r\n                        >del</Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                ))\r\n              }\r\n            </TableBody>\r\n          </Table>\r\n      }\r\n      <Pagination\r\n          {...pageState}\r\n          count={~~total}\r\n          refresh={getListData}\r\n      />\r\n    </S.TableSection>\r\n    <EditDialog refetch={getListData}\r\n                editType={editType}\r\n                updateSchema={option.updateGql}\r\n                dealEditData={option.dealEditData}\r\n                {...editDialogState}\r\n    />\r\n  </>\r\n}\r\n\r\nexport default BasicTable\r\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"FragmentDefinition\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"typeCondition\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"Dict\"}},\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"name\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"code\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"type\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"date\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"message\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DictInput\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"updateDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"mutation\",\"name\":{\"kind\":\"Name\",\"value\":\"deleteOneDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"deleteOneDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[]}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"oneDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}},\"type\":{\"kind\":\"NonNullType\",\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"oneDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"allDict\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"DictInput\"}},\"directives\":[]}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"allDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}}}],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"FragmentSpread\",\"name\":{\"kind\":\"Name\",\"value\":\"dictF\"},\"directives\":[]}]}},{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"total\"},\"name\":{\"kind\":\"Name\",\"value\":\"totalDict\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"data\"}}}],\"directives\":[]}]}},{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"allDataDict\"},\"variableDefinitions\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"alias\":{\"kind\":\"Name\",\"value\":\"allData\"},\"name\":{\"kind\":\"Name\",\"value\":\"allDataDict\"},\"arguments\":[],\"directives\":[]}]}}],\"loc\":{\"start\":0,\"end\":533}};\n    doc.loc.source = {\"body\":\"fragment dictF on Dict {\\r\\n    id\\r\\n    name\\r\\n    code\\r\\n    type\\r\\n    date\\r\\n    message\\r\\n}\\r\\n\\r\\nmutation updateDict($data: DictInput!){\\r\\n    updateDict(data: $data) {\\r\\n        ... dictF\\r\\n    }\\r\\n}\\r\\n\\r\\nmutation deleteOneDict($id: String!){\\r\\n    deleteOneDict(id: $id)\\r\\n}\\r\\n\\r\\nquery oneDict($id: String!){\\r\\n    oneDict(id: $id) {\\r\\n        ... dictF\\r\\n    }\\r\\n}\\r\\n\\r\\nquery allDict($data: DictInput){\\r\\n    allDict(data: $data) {\\r\\n        ... dictF\\r\\n    }\\r\\n    total: totalDict(data: $data)\\r\\n}\\r\\n\\r\\nquery allDataDict{\\r\\n    allData: allDataDict\\r\\n}\\r\\n\\r\\n\\r\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \r\n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \r\n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"updateDict\"] = oneQuery(doc, \"updateDict\");\n        \n        module.exports[\"deleteOneDict\"] = oneQuery(doc, \"deleteOneDict\");\n        \n        module.exports[\"oneDict\"] = oneQuery(doc, \"oneDict\");\n        \n        module.exports[\"allDict\"] = oneQuery(doc, \"allDict\");\n        \n        module.exports[\"allDataDict\"] = oneQuery(doc, \"allDataDict\");\n        \r\n"],"sourceRoot":""}